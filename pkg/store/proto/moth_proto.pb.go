// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.18.1
// source: moth_proto.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncryptionAlgorithm int32

const (
	EncryptionAlgorithm_UNKNOWN_ENCRYPTION EncryptionAlgorithm = 0 // used for detecting future algorithms
	EncryptionAlgorithm_AES_CTR_128        EncryptionAlgorithm = 1
	EncryptionAlgorithm_AES_CTR_256        EncryptionAlgorithm = 2
)

// Enum value maps for EncryptionAlgorithm.
var (
	EncryptionAlgorithm_name = map[int32]string{
		0: "UNKNOWN_ENCRYPTION",
		1: "AES_CTR_128",
		2: "AES_CTR_256",
	}
	EncryptionAlgorithm_value = map[string]int32{
		"UNKNOWN_ENCRYPTION": 0,
		"AES_CTR_128":        1,
		"AES_CTR_256":        2,
	}
)

func (x EncryptionAlgorithm) Enum() *EncryptionAlgorithm {
	p := new(EncryptionAlgorithm)
	*p = x
	return p
}

func (x EncryptionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_moth_proto_proto_enumTypes[0].Descriptor()
}

func (EncryptionAlgorithm) Type() protoreflect.EnumType {
	return &file_moth_proto_proto_enumTypes[0]
}

func (x EncryptionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EncryptionAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EncryptionAlgorithm(num)
	return nil
}

// Deprecated: Use EncryptionAlgorithm.Descriptor instead.
func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{0}
}

// Which KeyProvider encrypted the local keys.
type KeyProviderKind int32

const (
	KeyProviderKind_UNKNOWN KeyProviderKind = 0
	KeyProviderKind_HADOOP  KeyProviderKind = 1
	KeyProviderKind_AWS     KeyProviderKind = 2
	KeyProviderKind_GCP     KeyProviderKind = 3
	KeyProviderKind_AZURE   KeyProviderKind = 4
)

// Enum value maps for KeyProviderKind.
var (
	KeyProviderKind_name = map[int32]string{
		0: "UNKNOWN",
		1: "HADOOP",
		2: "AWS",
		3: "GCP",
		4: "AZURE",
	}
	KeyProviderKind_value = map[string]int32{
		"UNKNOWN": 0,
		"HADOOP":  1,
		"AWS":     2,
		"GCP":     3,
		"AZURE":   4,
	}
)

func (x KeyProviderKind) Enum() *KeyProviderKind {
	p := new(KeyProviderKind)
	*p = x
	return p
}

func (x KeyProviderKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyProviderKind) Descriptor() protoreflect.EnumDescriptor {
	return file_moth_proto_proto_enumTypes[1].Descriptor()
}

func (KeyProviderKind) Type() protoreflect.EnumType {
	return &file_moth_proto_proto_enumTypes[1]
}

func (x KeyProviderKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KeyProviderKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KeyProviderKind(num)
	return nil
}

// Deprecated: Use KeyProviderKind.Descriptor instead.
func (KeyProviderKind) EnumDescriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{1}
}

type CompressionKind int32

const (
	CompressionKind_NONE   CompressionKind = 0
	CompressionKind_ZLIB   CompressionKind = 1
	CompressionKind_SNAPPY CompressionKind = 2
	CompressionKind_LZO    CompressionKind = 3
	CompressionKind_LZ4    CompressionKind = 4
	CompressionKind_ZSTD   CompressionKind = 5
)

// Enum value maps for CompressionKind.
var (
	CompressionKind_name = map[int32]string{
		0: "NONE",
		1: "ZLIB",
		2: "SNAPPY",
		3: "LZO",
		4: "LZ4",
		5: "ZSTD",
	}
	CompressionKind_value = map[string]int32{
		"NONE":   0,
		"ZLIB":   1,
		"SNAPPY": 2,
		"LZO":    3,
		"LZ4":    4,
		"ZSTD":   5,
	}
)

func (x CompressionKind) Enum() *CompressionKind {
	p := new(CompressionKind)
	*p = x
	return p
}

func (x CompressionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_moth_proto_proto_enumTypes[2].Descriptor()
}

func (CompressionKind) Type() protoreflect.EnumType {
	return &file_moth_proto_proto_enumTypes[2]
}

func (x CompressionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompressionKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompressionKind(num)
	return nil
}

// Deprecated: Use CompressionKind.Descriptor instead.
func (CompressionKind) EnumDescriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{2}
}

// if you add new index stream kinds, you need to make sure to update
// StreamName to ensure it is added to the stripe in the right area
type Stream_Kind int32

const (
	Stream_PRESENT           Stream_Kind = 0
	Stream_DATA              Stream_Kind = 1
	Stream_LENGTH            Stream_Kind = 2
	Stream_DICTIONARY_DATA   Stream_Kind = 3
	Stream_DICTIONARY_COUNT  Stream_Kind = 4
	Stream_SECONDARY         Stream_Kind = 5
	Stream_ROW_INDEX         Stream_Kind = 6
	Stream_BLOOM_FILTER      Stream_Kind = 7
	Stream_BLOOM_FILTER_UTF8 Stream_Kind = 8
	// Virtual stream kinds to allocate space for encrypted index and data.
	Stream_ENCRYPTED_INDEX Stream_Kind = 9
	Stream_ENCRYPTED_DATA  Stream_Kind = 10
	// stripe statistics streams
	Stream_STRIPE_STATISTICS Stream_Kind = 100
	// A virtual stream kind that is used for setting the encryption IV.
	Stream_FILE_STATISTICS Stream_Kind = 101
)

// Enum value maps for Stream_Kind.
var (
	Stream_Kind_name = map[int32]string{
		0:   "PRESENT",
		1:   "DATA",
		2:   "LENGTH",
		3:   "DICTIONARY_DATA",
		4:   "DICTIONARY_COUNT",
		5:   "SECONDARY",
		6:   "ROW_INDEX",
		7:   "BLOOM_FILTER",
		8:   "BLOOM_FILTER_UTF8",
		9:   "ENCRYPTED_INDEX",
		10:  "ENCRYPTED_DATA",
		100: "STRIPE_STATISTICS",
		101: "FILE_STATISTICS",
	}
	Stream_Kind_value = map[string]int32{
		"PRESENT":           0,
		"DATA":              1,
		"LENGTH":            2,
		"DICTIONARY_DATA":   3,
		"DICTIONARY_COUNT":  4,
		"SECONDARY":         5,
		"ROW_INDEX":         6,
		"BLOOM_FILTER":      7,
		"BLOOM_FILTER_UTF8": 8,
		"ENCRYPTED_INDEX":   9,
		"ENCRYPTED_DATA":    10,
		"STRIPE_STATISTICS": 100,
		"FILE_STATISTICS":   101,
	}
)

func (x Stream_Kind) Enum() *Stream_Kind {
	p := new(Stream_Kind)
	*p = x
	return p
}

func (x Stream_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stream_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_moth_proto_proto_enumTypes[3].Descriptor()
}

func (Stream_Kind) Type() protoreflect.EnumType {
	return &file_moth_proto_proto_enumTypes[3]
}

func (x Stream_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Stream_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Stream_Kind(num)
	return nil
}

// Deprecated: Use Stream_Kind.Descriptor instead.
func (Stream_Kind) EnumDescriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{14, 0}
}

type ColumnEncoding_Kind int32

const (
	ColumnEncoding_DIRECT        ColumnEncoding_Kind = 0
	ColumnEncoding_DICTIONARY    ColumnEncoding_Kind = 1
	ColumnEncoding_DIRECT_V2     ColumnEncoding_Kind = 2
	ColumnEncoding_DICTIONARY_V2 ColumnEncoding_Kind = 3
)

// Enum value maps for ColumnEncoding_Kind.
var (
	ColumnEncoding_Kind_name = map[int32]string{
		0: "DIRECT",
		1: "DICTIONARY",
		2: "DIRECT_V2",
		3: "DICTIONARY_V2",
	}
	ColumnEncoding_Kind_value = map[string]int32{
		"DIRECT":        0,
		"DICTIONARY":    1,
		"DIRECT_V2":     2,
		"DICTIONARY_V2": 3,
	}
)

func (x ColumnEncoding_Kind) Enum() *ColumnEncoding_Kind {
	p := new(ColumnEncoding_Kind)
	*p = x
	return p
}

func (x ColumnEncoding_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnEncoding_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_moth_proto_proto_enumTypes[4].Descriptor()
}

func (ColumnEncoding_Kind) Type() protoreflect.EnumType {
	return &file_moth_proto_proto_enumTypes[4]
}

func (x ColumnEncoding_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColumnEncoding_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColumnEncoding_Kind(num)
	return nil
}

// Deprecated: Use ColumnEncoding_Kind.Descriptor instead.
func (ColumnEncoding_Kind) EnumDescriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{15, 0}
}

type Type_Kind int32

const (
	Type_BOOLEAN           Type_Kind = 0
	Type_BYTE              Type_Kind = 1
	Type_SHORT             Type_Kind = 2
	Type_INT               Type_Kind = 3
	Type_LONG              Type_Kind = 4
	Type_FLOAT             Type_Kind = 5
	Type_DOUBLE            Type_Kind = 6
	Type_STRING            Type_Kind = 7
	Type_BINARY            Type_Kind = 8
	Type_TIMESTAMP         Type_Kind = 9
	Type_LIST              Type_Kind = 10
	Type_MAP               Type_Kind = 11
	Type_STRUCT            Type_Kind = 12
	Type_UNION             Type_Kind = 13
	Type_DECIMAL           Type_Kind = 14
	Type_DATE              Type_Kind = 15
	Type_VARCHAR           Type_Kind = 16
	Type_CHAR              Type_Kind = 17
	Type_TIMESTAMP_INSTANT Type_Kind = 18
)

// Enum value maps for Type_Kind.
var (
	Type_Kind_name = map[int32]string{
		0:  "BOOLEAN",
		1:  "BYTE",
		2:  "SHORT",
		3:  "INT",
		4:  "LONG",
		5:  "FLOAT",
		6:  "DOUBLE",
		7:  "STRING",
		8:  "BINARY",
		9:  "TIMESTAMP",
		10: "LIST",
		11: "MAP",
		12: "STRUCT",
		13: "UNION",
		14: "DECIMAL",
		15: "DATE",
		16: "VARCHAR",
		17: "CHAR",
		18: "TIMESTAMP_INSTANT",
	}
	Type_Kind_value = map[string]int32{
		"BOOLEAN":           0,
		"BYTE":              1,
		"SHORT":             2,
		"INT":               3,
		"LONG":              4,
		"FLOAT":             5,
		"DOUBLE":            6,
		"STRING":            7,
		"BINARY":            8,
		"TIMESTAMP":         9,
		"LIST":              10,
		"MAP":               11,
		"STRUCT":            12,
		"UNION":             13,
		"DECIMAL":           14,
		"DATE":              15,
		"VARCHAR":           16,
		"CHAR":              17,
		"TIMESTAMP_INSTANT": 18,
	}
)

func (x Type_Kind) Enum() *Type_Kind {
	p := new(Type_Kind)
	*p = x
	return p
}

func (x Type_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_moth_proto_proto_enumTypes[5].Descriptor()
}

func (Type_Kind) Type() protoreflect.EnumType {
	return &file_moth_proto_proto_enumTypes[5]
}

func (x Type_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Type_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Type_Kind(num)
	return nil
}

// Deprecated: Use Type_Kind.Descriptor instead.
func (Type_Kind) EnumDescriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{19, 0}
}

type Space_Kind int32

const (
	Space_EP  Space_Kind = 0 // Exclusivespace 独占空间
	Space_NEP Space_Kind = 1 // Non-exclusivespace 非独占空间
)

// Enum value maps for Space_Kind.
var (
	Space_Kind_name = map[int32]string{
		0: "EP",
		1: "NEP",
	}
	Space_Kind_value = map[string]int32{
		"EP":  0,
		"NEP": 1,
	}
)

func (x Space_Kind) Enum() *Space_Kind {
	p := new(Space_Kind)
	*p = x
	return p
}

func (x Space_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Space_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_moth_proto_proto_enumTypes[6].Descriptor()
}

func (Space_Kind) Type() protoreflect.EnumType {
	return &file_moth_proto_proto_enumTypes[6]
}

func (x Space_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Space_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Space_Kind(num)
	return nil
}

// Deprecated: Use Space_Kind.Descriptor instead.
func (Space_Kind) EnumDescriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{33, 0}
}

type IntegerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *int64 `protobuf:"zigzag64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum *int64 `protobuf:"zigzag64,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum     *int64 `protobuf:"zigzag64,3,opt,name=sum" json:"sum,omitempty"`
}

func (x *IntegerStatistics) Reset() {
	*x = IntegerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerStatistics) ProtoMessage() {}

func (x *IntegerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerStatistics.ProtoReflect.Descriptor instead.
func (*IntegerStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{0}
}

func (x *IntegerStatistics) GetMinimum() int64 {
	if x != nil && x.Minimum != nil {
		return *x.Minimum
	}
	return 0
}

func (x *IntegerStatistics) GetMaximum() int64 {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return 0
}

func (x *IntegerStatistics) GetSum() int64 {
	if x != nil && x.Sum != nil {
		return *x.Sum
	}
	return 0
}

type DoubleStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *float64 `protobuf:"fixed64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum *float64 `protobuf:"fixed64,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum     *float64 `protobuf:"fixed64,3,opt,name=sum" json:"sum,omitempty"`
}

func (x *DoubleStatistics) Reset() {
	*x = DoubleStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleStatistics) ProtoMessage() {}

func (x *DoubleStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleStatistics.ProtoReflect.Descriptor instead.
func (*DoubleStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{1}
}

func (x *DoubleStatistics) GetMinimum() float64 {
	if x != nil && x.Minimum != nil {
		return *x.Minimum
	}
	return 0
}

func (x *DoubleStatistics) GetMaximum() float64 {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return 0
}

func (x *DoubleStatistics) GetSum() float64 {
	if x != nil && x.Sum != nil {
		return *x.Sum
	}
	return 0
}

type StringStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *string `protobuf:"bytes,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum *string `protobuf:"bytes,2,opt,name=maximum" json:"maximum,omitempty"`
	// sum will store the total length of all strings in a stripe
	Sum *int64 `protobuf:"zigzag64,3,opt,name=sum" json:"sum,omitempty"`
	// If the minimum or maximum value was longer than 1024 bytes, store a lower or upper
	// bound instead of the minimum or maximum values above.
	LowerBound *string `protobuf:"bytes,4,opt,name=lowerBound" json:"lowerBound,omitempty"`
	UpperBound *string `protobuf:"bytes,5,opt,name=upperBound" json:"upperBound,omitempty"`
}

func (x *StringStatistics) Reset() {
	*x = StringStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringStatistics) ProtoMessage() {}

func (x *StringStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringStatistics.ProtoReflect.Descriptor instead.
func (*StringStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{2}
}

func (x *StringStatistics) GetMinimum() string {
	if x != nil && x.Minimum != nil {
		return *x.Minimum
	}
	return ""
}

func (x *StringStatistics) GetMaximum() string {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return ""
}

func (x *StringStatistics) GetSum() int64 {
	if x != nil && x.Sum != nil {
		return *x.Sum
	}
	return 0
}

func (x *StringStatistics) GetLowerBound() string {
	if x != nil && x.LowerBound != nil {
		return *x.LowerBound
	}
	return ""
}

func (x *StringStatistics) GetUpperBound() string {
	if x != nil && x.UpperBound != nil {
		return *x.UpperBound
	}
	return ""
}

type BucketStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count []uint64 `protobuf:"varint,1,rep,packed,name=count" json:"count,omitempty"`
}

func (x *BucketStatistics) Reset() {
	*x = BucketStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketStatistics) ProtoMessage() {}

func (x *BucketStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketStatistics.ProtoReflect.Descriptor instead.
func (*BucketStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{3}
}

func (x *BucketStatistics) GetCount() []uint64 {
	if x != nil {
		return x.Count
	}
	return nil
}

type DecimalStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *string `protobuf:"bytes,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum *string `protobuf:"bytes,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum     *string `protobuf:"bytes,3,opt,name=sum" json:"sum,omitempty"`
}

func (x *DecimalStatistics) Reset() {
	*x = DecimalStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecimalStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalStatistics) ProtoMessage() {}

func (x *DecimalStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalStatistics.ProtoReflect.Descriptor instead.
func (*DecimalStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{4}
}

func (x *DecimalStatistics) GetMinimum() string {
	if x != nil && x.Minimum != nil {
		return *x.Minimum
	}
	return ""
}

func (x *DecimalStatistics) GetMaximum() string {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return ""
}

func (x *DecimalStatistics) GetSum() string {
	if x != nil && x.Sum != nil {
		return *x.Sum
	}
	return ""
}

type DateStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// min,max values saved as days since epoch
	Minimum *int32 `protobuf:"zigzag32,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum *int32 `protobuf:"zigzag32,2,opt,name=maximum" json:"maximum,omitempty"`
}

func (x *DateStatistics) Reset() {
	*x = DateStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateStatistics) ProtoMessage() {}

func (x *DateStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateStatistics.ProtoReflect.Descriptor instead.
func (*DateStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{5}
}

func (x *DateStatistics) GetMinimum() int32 {
	if x != nil && x.Minimum != nil {
		return *x.Minimum
	}
	return 0
}

func (x *DateStatistics) GetMaximum() int32 {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return 0
}

type TimestampStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// min,max values saved as milliseconds since epoch
	Minimum    *int64 `protobuf:"zigzag64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum    *int64 `protobuf:"zigzag64,2,opt,name=maximum" json:"maximum,omitempty"`
	MinimumUtc *int64 `protobuf:"zigzag64,3,opt,name=minimumUtc" json:"minimumUtc,omitempty"`
	MaximumUtc *int64 `protobuf:"zigzag64,4,opt,name=maximumUtc" json:"maximumUtc,omitempty"`
}

func (x *TimestampStatistics) Reset() {
	*x = TimestampStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampStatistics) ProtoMessage() {}

func (x *TimestampStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampStatistics.ProtoReflect.Descriptor instead.
func (*TimestampStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{6}
}

func (x *TimestampStatistics) GetMinimum() int64 {
	if x != nil && x.Minimum != nil {
		return *x.Minimum
	}
	return 0
}

func (x *TimestampStatistics) GetMaximum() int64 {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return 0
}

func (x *TimestampStatistics) GetMinimumUtc() int64 {
	if x != nil && x.MinimumUtc != nil {
		return *x.MinimumUtc
	}
	return 0
}

func (x *TimestampStatistics) GetMaximumUtc() int64 {
	if x != nil && x.MaximumUtc != nil {
		return *x.MaximumUtc
	}
	return 0
}

type BinaryStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sum will store the total binary blob length in a stripe
	Sum *int64 `protobuf:"zigzag64,1,opt,name=sum" json:"sum,omitempty"`
}

func (x *BinaryStatistics) Reset() {
	*x = BinaryStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryStatistics) ProtoMessage() {}

func (x *BinaryStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryStatistics.ProtoReflect.Descriptor instead.
func (*BinaryStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{7}
}

func (x *BinaryStatistics) GetSum() int64 {
	if x != nil && x.Sum != nil {
		return *x.Sum
	}
	return 0
}

// Statistics for list and map
type CollectionStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinChildren   *uint64 `protobuf:"varint,1,opt,name=minChildren" json:"minChildren,omitempty"`
	MaxChildren   *uint64 `protobuf:"varint,2,opt,name=maxChildren" json:"maxChildren,omitempty"`
	TotalChildren *uint64 `protobuf:"varint,3,opt,name=totalChildren" json:"totalChildren,omitempty"`
}

func (x *CollectionStatistics) Reset() {
	*x = CollectionStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionStatistics) ProtoMessage() {}

func (x *CollectionStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionStatistics.ProtoReflect.Descriptor instead.
func (*CollectionStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{8}
}

func (x *CollectionStatistics) GetMinChildren() uint64 {
	if x != nil && x.MinChildren != nil {
		return *x.MinChildren
	}
	return 0
}

func (x *CollectionStatistics) GetMaxChildren() uint64 {
	if x != nil && x.MaxChildren != nil {
		return *x.MaxChildren
	}
	return 0
}

func (x *CollectionStatistics) GetTotalChildren() uint64 {
	if x != nil && x.TotalChildren != nil {
		return *x.TotalChildren
	}
	return 0
}

type ColumnStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfValues       *uint64               `protobuf:"varint,1,opt,name=numberOfValues" json:"numberOfValues,omitempty"`
	IntStatistics        *IntegerStatistics    `protobuf:"bytes,2,opt,name=intStatistics" json:"intStatistics,omitempty"`
	DoubleStatistics     *DoubleStatistics     `protobuf:"bytes,3,opt,name=doubleStatistics" json:"doubleStatistics,omitempty"`
	StringStatistics     *StringStatistics     `protobuf:"bytes,4,opt,name=stringStatistics" json:"stringStatistics,omitempty"`
	BucketStatistics     *BucketStatistics     `protobuf:"bytes,5,opt,name=bucketStatistics" json:"bucketStatistics,omitempty"`
	DecimalStatistics    *DecimalStatistics    `protobuf:"bytes,6,opt,name=decimalStatistics" json:"decimalStatistics,omitempty"`
	DateStatistics       *DateStatistics       `protobuf:"bytes,7,opt,name=dateStatistics" json:"dateStatistics,omitempty"`
	BinaryStatistics     *BinaryStatistics     `protobuf:"bytes,8,opt,name=binaryStatistics" json:"binaryStatistics,omitempty"`
	TimestampStatistics  *TimestampStatistics  `protobuf:"bytes,9,opt,name=timestampStatistics" json:"timestampStatistics,omitempty"`
	HasNull              *bool                 `protobuf:"varint,10,opt,name=hasNull" json:"hasNull,omitempty"`
	BytesOnDisk          *uint64               `protobuf:"varint,11,opt,name=bytesOnDisk" json:"bytesOnDisk,omitempty"`
	CollectionStatistics *CollectionStatistics `protobuf:"bytes,12,opt,name=collectionStatistics" json:"collectionStatistics,omitempty"`
}

func (x *ColumnStatistics) Reset() {
	*x = ColumnStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnStatistics) ProtoMessage() {}

func (x *ColumnStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnStatistics.ProtoReflect.Descriptor instead.
func (*ColumnStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{9}
}

func (x *ColumnStatistics) GetNumberOfValues() uint64 {
	if x != nil && x.NumberOfValues != nil {
		return *x.NumberOfValues
	}
	return 0
}

func (x *ColumnStatistics) GetIntStatistics() *IntegerStatistics {
	if x != nil {
		return x.IntStatistics
	}
	return nil
}

func (x *ColumnStatistics) GetDoubleStatistics() *DoubleStatistics {
	if x != nil {
		return x.DoubleStatistics
	}
	return nil
}

func (x *ColumnStatistics) GetStringStatistics() *StringStatistics {
	if x != nil {
		return x.StringStatistics
	}
	return nil
}

func (x *ColumnStatistics) GetBucketStatistics() *BucketStatistics {
	if x != nil {
		return x.BucketStatistics
	}
	return nil
}

func (x *ColumnStatistics) GetDecimalStatistics() *DecimalStatistics {
	if x != nil {
		return x.DecimalStatistics
	}
	return nil
}

func (x *ColumnStatistics) GetDateStatistics() *DateStatistics {
	if x != nil {
		return x.DateStatistics
	}
	return nil
}

func (x *ColumnStatistics) GetBinaryStatistics() *BinaryStatistics {
	if x != nil {
		return x.BinaryStatistics
	}
	return nil
}

func (x *ColumnStatistics) GetTimestampStatistics() *TimestampStatistics {
	if x != nil {
		return x.TimestampStatistics
	}
	return nil
}

func (x *ColumnStatistics) GetHasNull() bool {
	if x != nil && x.HasNull != nil {
		return *x.HasNull
	}
	return false
}

func (x *ColumnStatistics) GetBytesOnDisk() uint64 {
	if x != nil && x.BytesOnDisk != nil {
		return *x.BytesOnDisk
	}
	return 0
}

func (x *ColumnStatistics) GetCollectionStatistics() *CollectionStatistics {
	if x != nil {
		return x.CollectionStatistics
	}
	return nil
}

type RowIndexEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions  []uint64          `protobuf:"varint,1,rep,packed,name=positions" json:"positions,omitempty"`
	Statistics *ColumnStatistics `protobuf:"bytes,2,opt,name=statistics" json:"statistics,omitempty"`
}

func (x *RowIndexEntry) Reset() {
	*x = RowIndexEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowIndexEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowIndexEntry) ProtoMessage() {}

func (x *RowIndexEntry) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowIndexEntry.ProtoReflect.Descriptor instead.
func (*RowIndexEntry) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{10}
}

func (x *RowIndexEntry) GetPositions() []uint64 {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *RowIndexEntry) GetStatistics() *ColumnStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type RowIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry []*RowIndexEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (x *RowIndex) Reset() {
	*x = RowIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowIndex) ProtoMessage() {}

func (x *RowIndex) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowIndex.ProtoReflect.Descriptor instead.
func (*RowIndex) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{11}
}

func (x *RowIndex) GetEntry() []*RowIndexEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type BloomFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumHashFunctions *uint32  `protobuf:"varint,1,opt,name=numHashFunctions" json:"numHashFunctions,omitempty"`
	Bitset           []uint64 `protobuf:"fixed64,2,rep,name=bitset" json:"bitset,omitempty"`
	Utf8Bitset       []byte   `protobuf:"bytes,3,opt,name=utf8bitset" json:"utf8bitset,omitempty"`
}

func (x *BloomFilter) Reset() {
	*x = BloomFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BloomFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloomFilter) ProtoMessage() {}

func (x *BloomFilter) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloomFilter.ProtoReflect.Descriptor instead.
func (*BloomFilter) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{12}
}

func (x *BloomFilter) GetNumHashFunctions() uint32 {
	if x != nil && x.NumHashFunctions != nil {
		return *x.NumHashFunctions
	}
	return 0
}

func (x *BloomFilter) GetBitset() []uint64 {
	if x != nil {
		return x.Bitset
	}
	return nil
}

func (x *BloomFilter) GetUtf8Bitset() []byte {
	if x != nil {
		return x.Utf8Bitset
	}
	return nil
}

type BloomFilterIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BloomFilter []*BloomFilter `protobuf:"bytes,1,rep,name=bloomFilter" json:"bloomFilter,omitempty"`
}

func (x *BloomFilterIndex) Reset() {
	*x = BloomFilterIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BloomFilterIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloomFilterIndex) ProtoMessage() {}

func (x *BloomFilterIndex) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloomFilterIndex.ProtoReflect.Descriptor instead.
func (*BloomFilterIndex) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{13}
}

func (x *BloomFilterIndex) GetBloomFilter() []*BloomFilter {
	if x != nil {
		return x.BloomFilter
	}
	return nil
}

type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind   *Stream_Kind `protobuf:"varint,1,opt,name=kind,enum=moth.proto.Stream_Kind" json:"kind,omitempty"`
	Column *uint32      `protobuf:"varint,2,opt,name=column" json:"column,omitempty"`
	Length *uint64      `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{14}
}

func (x *Stream) GetKind() Stream_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Stream_PRESENT
}

func (x *Stream) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *Stream) GetLength() uint64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

type ColumnEncoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind           *ColumnEncoding_Kind `protobuf:"varint,1,opt,name=kind,enum=moth.proto.ColumnEncoding_Kind" json:"kind,omitempty"`
	DictionarySize *uint32              `protobuf:"varint,2,opt,name=dictionarySize" json:"dictionarySize,omitempty"`
	// The encoding of the bloom filters for this column:
	//   0 or missing = none or original
	//   1            = MOTH-135 (utc for timestamps)
	BloomEncoding *uint32 `protobuf:"varint,3,opt,name=bloomEncoding" json:"bloomEncoding,omitempty"`
}

func (x *ColumnEncoding) Reset() {
	*x = ColumnEncoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnEncoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnEncoding) ProtoMessage() {}

func (x *ColumnEncoding) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnEncoding.ProtoReflect.Descriptor instead.
func (*ColumnEncoding) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{15}
}

func (x *ColumnEncoding) GetKind() ColumnEncoding_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ColumnEncoding_DIRECT
}

func (x *ColumnEncoding) GetDictionarySize() uint32 {
	if x != nil && x.DictionarySize != nil {
		return *x.DictionarySize
	}
	return 0
}

func (x *ColumnEncoding) GetBloomEncoding() uint32 {
	if x != nil && x.BloomEncoding != nil {
		return *x.BloomEncoding
	}
	return 0
}

type StripeEncryptionVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams  []*Stream         `protobuf:"bytes,1,rep,name=streams" json:"streams,omitempty"`
	Encoding []*ColumnEncoding `protobuf:"bytes,2,rep,name=encoding" json:"encoding,omitempty"`
}

func (x *StripeEncryptionVariant) Reset() {
	*x = StripeEncryptionVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeEncryptionVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeEncryptionVariant) ProtoMessage() {}

func (x *StripeEncryptionVariant) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeEncryptionVariant.ProtoReflect.Descriptor instead.
func (*StripeEncryptionVariant) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{16}
}

func (x *StripeEncryptionVariant) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *StripeEncryptionVariant) GetEncoding() []*ColumnEncoding {
	if x != nil {
		return x.Encoding
	}
	return nil
}

type StripeFooter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams        []*Stream         `protobuf:"bytes,1,rep,name=streams" json:"streams,omitempty"`
	Columns        []*ColumnEncoding `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	WriterTimezone *string           `protobuf:"bytes,3,opt,name=writerTimezone" json:"writerTimezone,omitempty"`
	// one for each column encryption variant
	Encryption []*StripeEncryptionVariant `protobuf:"bytes,4,rep,name=encryption" json:"encryption,omitempty"`
}

func (x *StripeFooter) Reset() {
	*x = StripeFooter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeFooter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeFooter) ProtoMessage() {}

func (x *StripeFooter) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeFooter.ProtoReflect.Descriptor instead.
func (*StripeFooter) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{17}
}

func (x *StripeFooter) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *StripeFooter) GetColumns() []*ColumnEncoding {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *StripeFooter) GetWriterTimezone() string {
	if x != nil && x.WriterTimezone != nil {
		return *x.WriterTimezone
	}
	return ""
}

func (x *StripeFooter) GetEncryption() []*StripeEncryptionVariant {
	if x != nil {
		return x.Encryption
	}
	return nil
}

type StringPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *StringPair) Reset() {
	*x = StringPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringPair) ProtoMessage() {}

func (x *StringPair) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringPair.ProtoReflect.Descriptor instead.
func (*StringPair) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{18}
}

func (x *StringPair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *StringPair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          *Type_Kind    `protobuf:"varint,1,opt,name=kind,enum=moth.proto.Type_Kind" json:"kind,omitempty"`
	Subtypes      []uint32      `protobuf:"varint,2,rep,packed,name=subtypes" json:"subtypes,omitempty"`
	FieldNames    []string      `protobuf:"bytes,3,rep,name=fieldNames" json:"fieldNames,omitempty"`
	MaximumLength *uint32       `protobuf:"varint,4,opt,name=maximumLength" json:"maximumLength,omitempty"`
	Precision     *uint32       `protobuf:"varint,5,opt,name=precision" json:"precision,omitempty"`
	Scale         *uint32       `protobuf:"varint,6,opt,name=scale" json:"scale,omitempty"`
	Attributes    []*StringPair `protobuf:"bytes,7,rep,name=attributes" json:"attributes,omitempty"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{19}
}

func (x *Type) GetKind() Type_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Type_BOOLEAN
}

func (x *Type) GetSubtypes() []uint32 {
	if x != nil {
		return x.Subtypes
	}
	return nil
}

func (x *Type) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *Type) GetMaximumLength() uint32 {
	if x != nil && x.MaximumLength != nil {
		return *x.MaximumLength
	}
	return 0
}

func (x *Type) GetPrecision() uint32 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *Type) GetScale() uint32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *Type) GetAttributes() []*StringPair {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type StripeInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the global file offset of the start of the stripe
	Offset *uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	// the number of bytes of index
	IndexLength *uint64 `protobuf:"varint,2,opt,name=indexLength" json:"indexLength,omitempty"`
	// the number of bytes of data
	DataLength *uint64 `protobuf:"varint,3,opt,name=dataLength" json:"dataLength,omitempty"`
	// the number of bytes in the stripe footer
	FooterLength *uint64 `protobuf:"varint,4,opt,name=footerLength" json:"footerLength,omitempty"`
	// the number of rows in this stripe
	NumberOfRows *uint64 `protobuf:"varint,5,opt,name=numberOfRows" json:"numberOfRows,omitempty"`
	// If this is present, the reader should use this value for the encryption
	// stripe id for setting the encryption IV. Otherwise, the reader should
	// use one larger than the previous stripe's encryptStripeId.
	// For unmerged MOTH files, the first stripe will use 1 and the rest of the
	// stripes won't have it set. For merged files, the stripe information
	// will be copied from their original files and thus the first stripe of
	// each of the input files will reset it to 1.
	// Note that 1 was choosen, because protobuf v3 doesn't serialize
	// primitive types that are the default (eg. 0).
	EncryptStripeId *uint64 `protobuf:"varint,6,opt,name=encryptStripeId" json:"encryptStripeId,omitempty"`
	// For each encryption variant, the new encrypted local key to use
	// until we find a replacement.
	EncryptedLocalKeys [][]byte `protobuf:"bytes,7,rep,name=encryptedLocalKeys" json:"encryptedLocalKeys,omitempty"`
}

func (x *StripeInformation) Reset() {
	*x = StripeInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeInformation) ProtoMessage() {}

func (x *StripeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeInformation.ProtoReflect.Descriptor instead.
func (*StripeInformation) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{20}
}

func (x *StripeInformation) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *StripeInformation) GetIndexLength() uint64 {
	if x != nil && x.IndexLength != nil {
		return *x.IndexLength
	}
	return 0
}

func (x *StripeInformation) GetDataLength() uint64 {
	if x != nil && x.DataLength != nil {
		return *x.DataLength
	}
	return 0
}

func (x *StripeInformation) GetFooterLength() uint64 {
	if x != nil && x.FooterLength != nil {
		return *x.FooterLength
	}
	return 0
}

func (x *StripeInformation) GetNumberOfRows() uint64 {
	if x != nil && x.NumberOfRows != nil {
		return *x.NumberOfRows
	}
	return 0
}

func (x *StripeInformation) GetEncryptStripeId() uint64 {
	if x != nil && x.EncryptStripeId != nil {
		return *x.EncryptStripeId
	}
	return 0
}

func (x *StripeInformation) GetEncryptedLocalKeys() [][]byte {
	if x != nil {
		return x.EncryptedLocalKeys
	}
	return nil
}

type UserMetadataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *UserMetadataItem) Reset() {
	*x = UserMetadataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetadataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetadataItem) ProtoMessage() {}

func (x *UserMetadataItem) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetadataItem.ProtoReflect.Descriptor instead.
func (*UserMetadataItem) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{21}
}

func (x *UserMetadataItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UserMetadataItem) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// StripeStatistics (1 per a stripe), which each contain the
// ColumnStatistics for each column.
// This message type is only used in MOTH v0 and v1.
type StripeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColStats []*ColumnStatistics `protobuf:"bytes,1,rep,name=colStats" json:"colStats,omitempty"`
}

func (x *StripeStatistics) Reset() {
	*x = StripeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeStatistics) ProtoMessage() {}

func (x *StripeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeStatistics.ProtoReflect.Descriptor instead.
func (*StripeStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{22}
}

func (x *StripeStatistics) GetColStats() []*ColumnStatistics {
	if x != nil {
		return x.ColStats
	}
	return nil
}

// This message type is only used in MOTH v0 and v1.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StripeStats []*StripeStatistics `protobuf:"bytes,1,rep,name=stripeStats" json:"stripeStats,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{23}
}

func (x *Metadata) GetStripeStats() []*StripeStatistics {
	if x != nil {
		return x.StripeStats
	}
	return nil
}

// In MOTH v2 (and for encrypted columns in v1), each column has
// their column statistics written separately.
type ColumnarStripeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// one value for each stripe in the file
	ColStats []*ColumnStatistics `protobuf:"bytes,1,rep,name=colStats" json:"colStats,omitempty"`
}

func (x *ColumnarStripeStatistics) Reset() {
	*x = ColumnarStripeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnarStripeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnarStripeStatistics) ProtoMessage() {}

func (x *ColumnarStripeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnarStripeStatistics.ProtoReflect.Descriptor instead.
func (*ColumnarStripeStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{24}
}

func (x *ColumnarStripeStatistics) GetColStats() []*ColumnStatistics {
	if x != nil {
		return x.ColStats
	}
	return nil
}

type FileStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column []*ColumnStatistics `protobuf:"bytes,1,rep,name=column" json:"column,omitempty"`
}

func (x *FileStatistics) Reset() {
	*x = FileStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStatistics) ProtoMessage() {}

func (x *FileStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStatistics.ProtoReflect.Descriptor instead.
func (*FileStatistics) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{25}
}

func (x *FileStatistics) GetColumn() []*ColumnStatistics {
	if x != nil {
		return x.Column
	}
	return nil
}

// How was the data masked? This isn't necessary for reading the file, but
// is documentation about how the file was written.
type DataMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the kind of masking, which may include third party masks
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// parameters for the mask
	MaskParameters []string `protobuf:"bytes,2,rep,name=maskParameters" json:"maskParameters,omitempty"`
	// the unencrypted column roots this mask was applied to
	Columns []uint32 `protobuf:"varint,3,rep,packed,name=columns" json:"columns,omitempty"`
}

func (x *DataMask) Reset() {
	*x = DataMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMask) ProtoMessage() {}

func (x *DataMask) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMask.ProtoReflect.Descriptor instead.
func (*DataMask) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{26}
}

func (x *DataMask) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DataMask) GetMaskParameters() []string {
	if x != nil {
		return x.MaskParameters
	}
	return nil
}

func (x *DataMask) GetColumns() []uint32 {
	if x != nil {
		return x.Columns
	}
	return nil
}

// Information about the encryption keys.
type EncryptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyName    *string              `protobuf:"bytes,1,opt,name=keyName" json:"keyName,omitempty"`
	KeyVersion *uint32              `protobuf:"varint,2,opt,name=keyVersion" json:"keyVersion,omitempty"`
	Algorithm  *EncryptionAlgorithm `protobuf:"varint,3,opt,name=algorithm,enum=moth.proto.EncryptionAlgorithm" json:"algorithm,omitempty"`
}

func (x *EncryptionKey) Reset() {
	*x = EncryptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKey) ProtoMessage() {}

func (x *EncryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKey.ProtoReflect.Descriptor instead.
func (*EncryptionKey) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{27}
}

func (x *EncryptionKey) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *EncryptionKey) GetKeyVersion() uint32 {
	if x != nil && x.KeyVersion != nil {
		return *x.KeyVersion
	}
	return 0
}

func (x *EncryptionKey) GetAlgorithm() EncryptionAlgorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return EncryptionAlgorithm_UNKNOWN_ENCRYPTION
}

// The description of an encryption variant.
// Each variant is a single subtype that is encrypted with a single key.
type EncryptionVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the column id of the root
	Root *uint32 `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	// The master key that was used to encrypt the local key, referenced as
	// an index into the Encryption.key list.
	Key *uint32 `protobuf:"varint,2,opt,name=key" json:"key,omitempty"`
	// the encrypted key for the file footer
	EncryptedKey []byte `protobuf:"bytes,3,opt,name=encryptedKey" json:"encryptedKey,omitempty"`
	// the stripe statistics for this variant
	StripeStatistics []*Stream `protobuf:"bytes,4,rep,name=stripeStatistics" json:"stripeStatistics,omitempty"`
	// encrypted file statistics as a FileStatistics
	FileStatistics []byte `protobuf:"bytes,5,opt,name=fileStatistics" json:"fileStatistics,omitempty"`
}

func (x *EncryptionVariant) Reset() {
	*x = EncryptionVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionVariant) ProtoMessage() {}

func (x *EncryptionVariant) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionVariant.ProtoReflect.Descriptor instead.
func (*EncryptionVariant) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{28}
}

func (x *EncryptionVariant) GetRoot() uint32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *EncryptionVariant) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *EncryptionVariant) GetEncryptedKey() []byte {
	if x != nil {
		return x.EncryptedKey
	}
	return nil
}

func (x *EncryptionVariant) GetStripeStatistics() []*Stream {
	if x != nil {
		return x.StripeStatistics
	}
	return nil
}

func (x *EncryptionVariant) GetFileStatistics() []byte {
	if x != nil {
		return x.FileStatistics
	}
	return nil
}

type Encryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all of the masks used in this file
	Mask []*DataMask `protobuf:"bytes,1,rep,name=mask" json:"mask,omitempty"`
	// all of the keys used in this file
	Key []*EncryptionKey `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
	// The encrypted variants.
	// Readers should prefer the first variant that the user has access to
	// the corresponding key. If they don't have access to any of the keys,
	// they should get the unencrypted masked data.
	Variants []*EncryptionVariant `protobuf:"bytes,3,rep,name=variants" json:"variants,omitempty"`
	// How are the local keys encrypted?
	KeyProvider *KeyProviderKind `protobuf:"varint,4,opt,name=keyProvider,enum=moth.proto.KeyProviderKind" json:"keyProvider,omitempty"`
}

func (x *Encryption) Reset() {
	*x = Encryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encryption) ProtoMessage() {}

func (x *Encryption) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encryption.ProtoReflect.Descriptor instead.
func (*Encryption) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{29}
}

func (x *Encryption) GetMask() []*DataMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *Encryption) GetKey() []*EncryptionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Encryption) GetVariants() []*EncryptionVariant {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *Encryption) GetKeyProvider() KeyProviderKind {
	if x != nil && x.KeyProvider != nil {
		return *x.KeyProvider
	}
	return KeyProviderKind_UNKNOWN
}

type Footer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderLength   *uint64              `protobuf:"varint,1,opt,name=headerLength" json:"headerLength,omitempty"`
	ContentLength  *uint64              `protobuf:"varint,2,opt,name=contentLength" json:"contentLength,omitempty"`
	Stripes        []*StripeInformation `protobuf:"bytes,3,rep,name=stripes" json:"stripes,omitempty"`
	Types          []*Type              `protobuf:"bytes,4,rep,name=types" json:"types,omitempty"`
	Metadata       []*UserMetadataItem  `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty"`
	NumberOfRows   *uint64              `protobuf:"varint,6,opt,name=numberOfRows" json:"numberOfRows,omitempty"`
	Statistics     []*ColumnStatistics  `protobuf:"bytes,7,rep,name=statistics" json:"statistics,omitempty"`
	RowIndexStride *uint32              `protobuf:"varint,8,opt,name=rowIndexStride" json:"rowIndexStride,omitempty"`
	// Each implementation that writes MOTH files should register for a code
	// 0 = MOTH Java
	// 1 = MOTH C++
	// 2 = Presto
	// 3 = Scritchley Go from https://github.com/scritchley/orc
	Writer *uint32 `protobuf:"varint,9,opt,name=writer" json:"writer,omitempty"`
	// information about the encryption in this file
	Encryption *Encryption `protobuf:"bytes,10,opt,name=encryption" json:"encryption,omitempty"`
	// the number of bytes in the encrypted stripe statistics
	StripeStatisticsLength *uint64 `protobuf:"varint,11,opt,name=stripeStatisticsLength" json:"stripeStatisticsLength,omitempty"`
}

func (x *Footer) Reset() {
	*x = Footer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Footer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Footer) ProtoMessage() {}

func (x *Footer) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Footer.ProtoReflect.Descriptor instead.
func (*Footer) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{30}
}

func (x *Footer) GetHeaderLength() uint64 {
	if x != nil && x.HeaderLength != nil {
		return *x.HeaderLength
	}
	return 0
}

func (x *Footer) GetContentLength() uint64 {
	if x != nil && x.ContentLength != nil {
		return *x.ContentLength
	}
	return 0
}

func (x *Footer) GetStripes() []*StripeInformation {
	if x != nil {
		return x.Stripes
	}
	return nil
}

func (x *Footer) GetTypes() []*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Footer) GetMetadata() []*UserMetadataItem {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Footer) GetNumberOfRows() uint64 {
	if x != nil && x.NumberOfRows != nil {
		return *x.NumberOfRows
	}
	return 0
}

func (x *Footer) GetStatistics() []*ColumnStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Footer) GetRowIndexStride() uint32 {
	if x != nil && x.RowIndexStride != nil {
		return *x.RowIndexStride
	}
	return 0
}

func (x *Footer) GetWriter() uint32 {
	if x != nil && x.Writer != nil {
		return *x.Writer
	}
	return 0
}

func (x *Footer) GetEncryption() *Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *Footer) GetStripeStatisticsLength() uint64 {
	if x != nil && x.StripeStatisticsLength != nil {
		return *x.StripeStatisticsLength
	}
	return 0
}

// Serialized length must be less that 255 bytes
type PostScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FooterLength         *uint64          `protobuf:"varint,1,opt,name=footerLength" json:"footerLength,omitempty"`
	Compression          *CompressionKind `protobuf:"varint,2,opt,name=compression,enum=moth.proto.CompressionKind" json:"compression,omitempty"`
	CompressionBlockSize *uint64          `protobuf:"varint,3,opt,name=compressionBlockSize" json:"compressionBlockSize,omitempty"`
	// the version of the file format
	//   [0, 11] = Hive 0.11
	//   [0, 12] = Hive 0.12
	Version        []uint32 `protobuf:"varint,4,rep,packed,name=version" json:"version,omitempty"`
	MetadataLength *uint64  `protobuf:"varint,5,opt,name=metadataLength" json:"metadataLength,omitempty"`
	// The version of the writer that wrote the file. This number is
	// updated when we make fixes or large changes to the writer so that
	// readers can detect whether a given bug is present in the data.
	//
	// Only the Java MOTH writer may use values under 6 (or missing) so that
	// readers that predate MOTH-202 treat the new writers correctly. Each
	// writer should assign their own sequence of versions starting from 6.
	//
	// Version of the MOTH Java writer:
	//   0 = original
	//   1 = HIVE-8732 fixed (fixed stripe/file maximum statistics &
	//                        string statistics use utf8 for min/max)
	//   2 = HIVE-4243 fixed (use real column names from Hive tables)
	//   3 = HIVE-12055 added (vectorized writer implementation)
	//   4 = HIVE-13083 fixed (decimals write present stream correctly)
	//   5 = MOTH-101 fixed (bloom filters use utf8 consistently)
	//   6 = MOTH-135 fixed (timestamp statistics use utc)
	//   7 = MOTH-517 fixed (decimal64 min/max incorrect)
	//   8 = MOTH-203 added (trim very long string statistics)
	//   9 = MOTH-14 added (column encryption)
	//
	// Version of the MOTH C++ writer:
	//   6 = original
	//
	// Version of the Presto writer:
	//   6 = original
	//
	// Version of the Scritchley Go writer:
	//   6 = original
	//
	WriterVersion *uint32 `protobuf:"varint,6,opt,name=writerVersion" json:"writerVersion,omitempty"`
	// Leave this last in the record
	Magic *string `protobuf:"bytes,8000,opt,name=magic" json:"magic,omitempty"`
}

func (x *PostScript) Reset() {
	*x = PostScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostScript) ProtoMessage() {}

func (x *PostScript) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostScript.ProtoReflect.Descriptor instead.
func (*PostScript) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{31}
}

func (x *PostScript) GetFooterLength() uint64 {
	if x != nil && x.FooterLength != nil {
		return *x.FooterLength
	}
	return 0
}

func (x *PostScript) GetCompression() CompressionKind {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return CompressionKind_NONE
}

func (x *PostScript) GetCompressionBlockSize() uint64 {
	if x != nil && x.CompressionBlockSize != nil {
		return *x.CompressionBlockSize
	}
	return 0
}

func (x *PostScript) GetVersion() []uint32 {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PostScript) GetMetadataLength() uint64 {
	if x != nil && x.MetadataLength != nil {
		return *x.MetadataLength
	}
	return 0
}

func (x *PostScript) GetWriterVersion() uint32 {
	if x != nil && x.WriterVersion != nil {
		return *x.WriterVersion
	}
	return 0
}

func (x *PostScript) GetMagic() string {
	if x != nil && x.Magic != nil {
		return *x.Magic
	}
	return ""
}

// The contents of the file tail that must be serialized.
// This gets serialized as part of OrcSplit, also used by footer cache.
type FileTail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Postscript       *PostScript `protobuf:"bytes,1,opt,name=postscript" json:"postscript,omitempty"`
	Footer           *Footer     `protobuf:"bytes,2,opt,name=footer" json:"footer,omitempty"`
	FileLength       *uint64     `protobuf:"varint,3,opt,name=fileLength" json:"fileLength,omitempty"`
	PostscriptLength *uint64     `protobuf:"varint,4,opt,name=postscriptLength" json:"postscriptLength,omitempty"`
}

func (x *FileTail) Reset() {
	*x = FileTail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTail) ProtoMessage() {}

func (x *FileTail) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTail.ProtoReflect.Descriptor instead.
func (*FileTail) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{32}
}

func (x *FileTail) GetPostscript() *PostScript {
	if x != nil {
		return x.Postscript
	}
	return nil
}

func (x *FileTail) GetFooter() *Footer {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *FileTail) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *FileTail) GetPostscriptLength() uint64 {
	if x != nil && x.PostscriptLength != nil {
		return *x.PostscriptLength
	}
	return 0
}

// 空间元数据库
type Space struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间ID
	Id *uint64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// 空间类型
	Kind *Space_Kind `protobuf:"varint,2,req,name=kind,enum=moth.proto.Space_Kind" json:"kind,omitempty"`
	// 元数存储类型
	Types []Type_Kind `protobuf:"varint,3,rep,name=types,enum=moth.proto.Type_Kind" json:"types,omitempty"`
}

func (x *Space) Reset() {
	*x = Space{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Space) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Space) ProtoMessage() {}

func (x *Space) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Space.ProtoReflect.Descriptor instead.
func (*Space) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{33}
}

func (x *Space) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Space) GetKind() Space_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Space_EP
}

func (x *Space) GetTypes() []Type_Kind {
	if x != nil {
		return x.Types
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 存储key
	Key []byte `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	// 存储当前key所在 Stripe的顺序量，根据此顺序快速定位每个字段位置
	// 该值是自增的
	Position *uint32 `protobuf:"varint,2,req,name=position" json:"position,omitempty"`
	// 时间戳记录当前key的版本号
	Ts *uint64 `protobuf:"varint,3,req,name=ts" json:"ts,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{34}
}

func (x *Key) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Key) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *Key) GetTs() uint64 {
	if x != nil && x.Ts != nil {
		return *x.Ts
	}
	return 0
}

type DeleteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 存储key
	Key []byte `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	// 时间戳记录当前key的版本号
	Ts *uint64 `protobuf:"varint,2,req,name=ts" json:"ts,omitempty"`
}

func (x *DeleteKey) Reset() {
	*x = DeleteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moth_proto_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKey) ProtoMessage() {}

func (x *DeleteKey) ProtoReflect() protoreflect.Message {
	mi := &file_moth_proto_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKey.ProtoReflect.Descriptor instead.
func (*DeleteKey) Descriptor() ([]byte, []int) {
	return file_moth_proto_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeleteKey) GetTs() uint64 {
	if x != nil && x.Ts != nil {
		return *x.Ts
	}
	return 0
}

var File_moth_proto_proto protoreflect.FileDescriptor

var file_moth_proto_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x6f, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59,
	0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x58, 0x0a, 0x10, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x73, 0x75, 0x6d, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x2c,
	0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x11,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x44, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x89, 0x01,
	0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x55, 0x74, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x55, 0x74, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x55, 0x74, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x55, 0x74, 0x63, 0x22, 0x24, 0x0a, 0x10, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22,
	0x80, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0x9d, 0x06, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x48,
	0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x42, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x51, 0x0a,
	0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x13, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x54, 0x0a, 0x14,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x14, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x22, 0x6f, 0x0a, 0x0d, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x22, 0x3b, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2f, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x77, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x71, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x48, 0x61,
	0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x74, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x06, 0x62, 0x69, 0x74,
	0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x74, 0x66, 0x38, 0x62, 0x69, 0x74, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x74, 0x66, 0x38, 0x62, 0x69, 0x74,
	0x73, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xd8, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xf0, 0x01, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x55, 0x54, 0x46, 0x38, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x09, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x65, 0x22, 0xd9, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x33, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0x44, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x56, 0x32, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x56, 0x32, 0x10, 0x03, 0x22, 0x7f, 0x0a, 0x17, 0x53, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f,
	0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52,
	0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x41, 0x50, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52,
	0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x52, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x54, 0x10, 0x12, 0x22, 0x8f, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x4a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x54, 0x0a,
	0x18, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f,
	0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x64, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xc5, 0x01, 0x0a,
	0x11, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0xff, 0x03, 0x0a, 0x06, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x52, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xa6, 0x02, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x18, 0xc0, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x22,
	0xba, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x89, 0x01, 0x0a,
	0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x17, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x50, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4e, 0x45, 0x50, 0x10, 0x01, 0x22, 0x43, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x22, 0x2d, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x2a, 0x4f, 0x0a, 0x13,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45,
	0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x45, 0x53, 0x5f, 0x43, 0x54, 0x52, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x45, 0x53, 0x5f, 0x43, 0x54, 0x52, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x02, 0x2a, 0x47, 0x0a,
	0x0f, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x41, 0x44, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x53,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x43, 0x50, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x5a, 0x55, 0x52, 0x45, 0x10, 0x04, 0x2a, 0x4d, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x4c, 0x49, 0x42, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x5a, 0x4f,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x5a, 0x34, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x5a,
	0x53, 0x54, 0x44, 0x10, 0x05, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x70, 0x2f, 0x6d, 0x6f, 0x74,
	0x68, 0x64, 0x62, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3b, 0x6d, 0x6f, 0x74, 0x68, 0x70, 0x62,
}

var (
	file_moth_proto_proto_rawDescOnce sync.Once
	file_moth_proto_proto_rawDescData = file_moth_proto_proto_rawDesc
)

func file_moth_proto_proto_rawDescGZIP() []byte {
	file_moth_proto_proto_rawDescOnce.Do(func() {
		file_moth_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_moth_proto_proto_rawDescData)
	})
	return file_moth_proto_proto_rawDescData
}

var file_moth_proto_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_moth_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_moth_proto_proto_goTypes = []interface{}{
	(EncryptionAlgorithm)(0),         // 0: moth.proto.EncryptionAlgorithm
	(KeyProviderKind)(0),             // 1: moth.proto.KeyProviderKind
	(CompressionKind)(0),             // 2: moth.proto.CompressionKind
	(Stream_Kind)(0),                 // 3: moth.proto.Stream.Kind
	(ColumnEncoding_Kind)(0),         // 4: moth.proto.ColumnEncoding.Kind
	(Type_Kind)(0),                   // 5: moth.proto.Type.Kind
	(Space_Kind)(0),                  // 6: moth.proto.Space.Kind
	(*IntegerStatistics)(nil),        // 7: moth.proto.IntegerStatistics
	(*DoubleStatistics)(nil),         // 8: moth.proto.DoubleStatistics
	(*StringStatistics)(nil),         // 9: moth.proto.StringStatistics
	(*BucketStatistics)(nil),         // 10: moth.proto.BucketStatistics
	(*DecimalStatistics)(nil),        // 11: moth.proto.DecimalStatistics
	(*DateStatistics)(nil),           // 12: moth.proto.DateStatistics
	(*TimestampStatistics)(nil),      // 13: moth.proto.TimestampStatistics
	(*BinaryStatistics)(nil),         // 14: moth.proto.BinaryStatistics
	(*CollectionStatistics)(nil),     // 15: moth.proto.CollectionStatistics
	(*ColumnStatistics)(nil),         // 16: moth.proto.ColumnStatistics
	(*RowIndexEntry)(nil),            // 17: moth.proto.RowIndexEntry
	(*RowIndex)(nil),                 // 18: moth.proto.RowIndex
	(*BloomFilter)(nil),              // 19: moth.proto.BloomFilter
	(*BloomFilterIndex)(nil),         // 20: moth.proto.BloomFilterIndex
	(*Stream)(nil),                   // 21: moth.proto.Stream
	(*ColumnEncoding)(nil),           // 22: moth.proto.ColumnEncoding
	(*StripeEncryptionVariant)(nil),  // 23: moth.proto.StripeEncryptionVariant
	(*StripeFooter)(nil),             // 24: moth.proto.StripeFooter
	(*StringPair)(nil),               // 25: moth.proto.StringPair
	(*Type)(nil),                     // 26: moth.proto.Type
	(*StripeInformation)(nil),        // 27: moth.proto.StripeInformation
	(*UserMetadataItem)(nil),         // 28: moth.proto.UserMetadataItem
	(*StripeStatistics)(nil),         // 29: moth.proto.StripeStatistics
	(*Metadata)(nil),                 // 30: moth.proto.Metadata
	(*ColumnarStripeStatistics)(nil), // 31: moth.proto.ColumnarStripeStatistics
	(*FileStatistics)(nil),           // 32: moth.proto.FileStatistics
	(*DataMask)(nil),                 // 33: moth.proto.DataMask
	(*EncryptionKey)(nil),            // 34: moth.proto.EncryptionKey
	(*EncryptionVariant)(nil),        // 35: moth.proto.EncryptionVariant
	(*Encryption)(nil),               // 36: moth.proto.Encryption
	(*Footer)(nil),                   // 37: moth.proto.Footer
	(*PostScript)(nil),               // 38: moth.proto.PostScript
	(*FileTail)(nil),                 // 39: moth.proto.FileTail
	(*Space)(nil),                    // 40: moth.proto.Space
	(*Key)(nil),                      // 41: moth.proto.Key
	(*DeleteKey)(nil),                // 42: moth.proto.DeleteKey
}
var file_moth_proto_proto_depIdxs = []int32{
	7,  // 0: moth.proto.ColumnStatistics.intStatistics:type_name -> moth.proto.IntegerStatistics
	8,  // 1: moth.proto.ColumnStatistics.doubleStatistics:type_name -> moth.proto.DoubleStatistics
	9,  // 2: moth.proto.ColumnStatistics.stringStatistics:type_name -> moth.proto.StringStatistics
	10, // 3: moth.proto.ColumnStatistics.bucketStatistics:type_name -> moth.proto.BucketStatistics
	11, // 4: moth.proto.ColumnStatistics.decimalStatistics:type_name -> moth.proto.DecimalStatistics
	12, // 5: moth.proto.ColumnStatistics.dateStatistics:type_name -> moth.proto.DateStatistics
	14, // 6: moth.proto.ColumnStatistics.binaryStatistics:type_name -> moth.proto.BinaryStatistics
	13, // 7: moth.proto.ColumnStatistics.timestampStatistics:type_name -> moth.proto.TimestampStatistics
	15, // 8: moth.proto.ColumnStatistics.collectionStatistics:type_name -> moth.proto.CollectionStatistics
	16, // 9: moth.proto.RowIndexEntry.statistics:type_name -> moth.proto.ColumnStatistics
	17, // 10: moth.proto.RowIndex.entry:type_name -> moth.proto.RowIndexEntry
	19, // 11: moth.proto.BloomFilterIndex.bloomFilter:type_name -> moth.proto.BloomFilter
	3,  // 12: moth.proto.Stream.kind:type_name -> moth.proto.Stream.Kind
	4,  // 13: moth.proto.ColumnEncoding.kind:type_name -> moth.proto.ColumnEncoding.Kind
	21, // 14: moth.proto.StripeEncryptionVariant.streams:type_name -> moth.proto.Stream
	22, // 15: moth.proto.StripeEncryptionVariant.encoding:type_name -> moth.proto.ColumnEncoding
	21, // 16: moth.proto.StripeFooter.streams:type_name -> moth.proto.Stream
	22, // 17: moth.proto.StripeFooter.columns:type_name -> moth.proto.ColumnEncoding
	23, // 18: moth.proto.StripeFooter.encryption:type_name -> moth.proto.StripeEncryptionVariant
	5,  // 19: moth.proto.Type.kind:type_name -> moth.proto.Type.Kind
	25, // 20: moth.proto.Type.attributes:type_name -> moth.proto.StringPair
	16, // 21: moth.proto.StripeStatistics.colStats:type_name -> moth.proto.ColumnStatistics
	29, // 22: moth.proto.Metadata.stripeStats:type_name -> moth.proto.StripeStatistics
	16, // 23: moth.proto.ColumnarStripeStatistics.colStats:type_name -> moth.proto.ColumnStatistics
	16, // 24: moth.proto.FileStatistics.column:type_name -> moth.proto.ColumnStatistics
	0,  // 25: moth.proto.EncryptionKey.algorithm:type_name -> moth.proto.EncryptionAlgorithm
	21, // 26: moth.proto.EncryptionVariant.stripeStatistics:type_name -> moth.proto.Stream
	33, // 27: moth.proto.Encryption.mask:type_name -> moth.proto.DataMask
	34, // 28: moth.proto.Encryption.key:type_name -> moth.proto.EncryptionKey
	35, // 29: moth.proto.Encryption.variants:type_name -> moth.proto.EncryptionVariant
	1,  // 30: moth.proto.Encryption.keyProvider:type_name -> moth.proto.KeyProviderKind
	27, // 31: moth.proto.Footer.stripes:type_name -> moth.proto.StripeInformation
	26, // 32: moth.proto.Footer.types:type_name -> moth.proto.Type
	28, // 33: moth.proto.Footer.metadata:type_name -> moth.proto.UserMetadataItem
	16, // 34: moth.proto.Footer.statistics:type_name -> moth.proto.ColumnStatistics
	36, // 35: moth.proto.Footer.encryption:type_name -> moth.proto.Encryption
	2,  // 36: moth.proto.PostScript.compression:type_name -> moth.proto.CompressionKind
	38, // 37: moth.proto.FileTail.postscript:type_name -> moth.proto.PostScript
	37, // 38: moth.proto.FileTail.footer:type_name -> moth.proto.Footer
	6,  // 39: moth.proto.Space.kind:type_name -> moth.proto.Space.Kind
	5,  // 40: moth.proto.Space.types:type_name -> moth.proto.Type.Kind
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_moth_proto_proto_init() }
func file_moth_proto_proto_init() {
	if File_moth_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moth_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecimalStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowIndexEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BloomFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BloomFilterIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnEncoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeEncryptionVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeFooter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetadataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnarStripeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Footer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Space); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moth_proto_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moth_proto_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_moth_proto_proto_goTypes,
		DependencyIndexes: file_moth_proto_proto_depIdxs,
		EnumInfos:         file_moth_proto_proto_enumTypes,
		MessageInfos:      file_moth_proto_proto_msgTypes,
	}.Build()
	File_moth_proto_proto = out.File
	file_moth_proto_proto_rawDesc = nil
	file_moth_proto_proto_goTypes = nil
	file_moth_proto_proto_depIdxs = nil
}
